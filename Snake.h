// Заголовочный файл объявляет класс, отвечающий за создание, отрисовку и поведение Змейки.

#ifndef SNAKE_H
#define SNAKE_H
#include <vector>
#include <QPainter>

// Базовый класс QObject является основой для многих классов в Qt и обеспечивает множество важных функций для объектов,
// используемых в Qt-приложениях. Вот некоторые из основных функций, которые выполняет базовый класс QObject:
// 1 Управление памятью :
// QObject реализует механизм управления памятью через систему родительства.Объекты QObject могут иметь родительские объекты,
// и когда родительский объект уничтожается, он автоматически удаляет всех своих детей.
// Это позволяет избежать утечек памяти и упрощает управление памятью в Qt - приложениях.
// 2 Система сигналов и слотов :
// QObject предоставляет механизм сигналов и слотов, который позволяет объектам взаимодействовать между собой без явного вызова методов.
// Сигналы генерируются при определенных событиях, а слоты вызываются в ответ на эти сигналы.
// Это обеспечивает гибкую архитектуру и упрощает коммуникацию между компонентами приложения.
// 3 Динамическая типизация :
// QObject поддерживает механизм динамической типизации,
// который позволяет проверять тип объекта во время выполнения и выполнять динамическое приведение типов.
// Это полезно при работе с объектами, которые создаются во время выполнения, такими как виджеты в пользовательском интерфейсе.
// 4 Метаобъектная система(MOC) :
// Qt использует метаобъектную систему(MOC), чтобы обеспечить дополнительные функции для объектов QObject,
// такие как механизм сигналов и слотов, механизм рефлексии и возможность сериализации объектов.
// MOC генерирует дополнительный код для классов, наследующих QObject, который добавляет эти дополнительные функции.
// 5 Идентификация объектов :
// Каждый объект QObject имеет уникальный идентификатор(ID), который может использоваться для идентификации объекта во время выполнения.
// Это полезно при обработке сигналов и слотов или при управлении объектами в приложении.
// В целом, базовый класс QObject обеспечивает фундаментальные возможности для объектов в Qt - приложениях,
// такие как управление памятью, взаимодействие между объектами и дополнительные функции,
// которые делают работу с объектами более гибкой и эффективной.
#include <QObject> // Заголовочный файл из библиотеки Qt, содержащий определение базового класса QObject.

class Snake : public QObject
{
    Q_OBJECT

public:

    // Структура, содержащая координаты сегмента Змейки.
    // Координаты x и y - отвечают за номер одной клетки игрового поля (игровое поле разбивается на поределённое количество клеток).
    struct SnakeSegment { int x, y; }; // Координаты сегмента Змейки.
    std::vector<SnakeSegment> segments; // Вектор для хранения сегментов змейки.
    std::vector<SnakeSegment> getBodySegments() const; // Получение вектора, который хранит координаты сегментов тела Змейки БЕЗ ГОЛОВЫ.
    bool directionChangedRecently = false; // "Флаг" недавнего изменений направления Змейки.
    int getHeadX() const; // Метод для получения X координаты головы змейки
    int getHeadY() const; // Метод для получения Y координаты головы змейки

    // Перечисление возможных направлений движения Змейки.
    enum class Direction { Up, Down, Left, Right };
    Direction direction = Direction::Up; // Текущее направление движения Змейки.

    // Конструктор класса Snake.
    // Объявление конструктора класса Snake с параметром-указателем на объект QObject,
    // который может использоваться в качестве родительского объекта.
    // explicit указывает, что этот конструктор вызывается явно, а не неявно.
    explicit Snake(QObject* parent = nullptr);
    void initialize(); // Метод для инициализации Змейки с определёнными параметрами.
    void move(); // Метод для перемещения Змейки.
    void grow(); // Метод для добавления сегмента Змейки.

    // Метод для отрисовки Змейки.
    // Он принимает ссылку на объект QPainter, который будет использоваться для рисования.
    void draw(QPainter& painter);
    void setDirection(Direction newDirection); // Метод для установки направления движения Змейки.

    // Ключевое слово const указывает на то, что данная функция является методом, который не изменяет состояние объекта,
    // для которого он вызывается. В контексте методов класса это означает, что этот метод не будет изменять значения членов данных данного объекта.
    // Метод будет доступен для вызова из константных объектов класса или через константные ссылки/указатели на объекты класса.
    bool contains(int x, int y) const; // Метод для проверки, содержится ли сегмент Змейки по данным координатам.
};

#endif